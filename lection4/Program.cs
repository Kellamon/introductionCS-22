// Двумерные массивы
string[,] table = new string[2, 5];
//String.Empty для инициализации строк
// table[0,0]   table[0,1] table [0,2] table[0,4] // крайняе значение будет 4, так как массив ограничен 5 значениями включая 0
// table[1,0]   table[1,1] table [1,2] table[1,4]

// 1 пример
/*table[1,2]="слово";

for (int rows = 0; rows < 2; rows++)
{
    for (int columns = 0; columns < 5; columns++)
    {
       Console.WriteLine($"-{table[rows, columns]}-");
    }
}*/

// 2 пример
/*int[,] matrix = new int[3,4];
                            //обращение к первому значению массив[3]
for (int i = 0; i < matrix.GetLength(0); i++) 

{                              //обращение к первому значению массив[3]
    for (int j = 0; j < matrix.GetLength(1); j++)
    {
        Console.Write($"{matrix[i,j]} ");
    }
Console.WriteLine();   // для создания разграничивания
}*/

// 3 пример с генерацией и заполнением
/*
void PrintArray(int[,] matr)
{
        //обращение к первому значению массив[3]
    for (int i = 0; i < matr.GetLength(0); i++)

    {                              //обращение к первому значению массив[3]
        for (int j = 0; j < matr.GetLength(1); j++)
        {
            Console.Write($"{matr[i, j]} ");
        }
        Console.WriteLine();   // для создания разграничивания
    }
}

void FillArray(int[,] matr)
{
    for (int i = 0; i < matr.GetLength(0); i++)
    {
        for (int j = 0; j < matr.GetLength(1); j++)
        {
            matr[i,j]=new Random().Next(1,10);// [1;10]
        }
    }
}
int[,] matrix = new int[3, 4];
PrintArray(matrix);
FillArray(matrix);
Console.WriteLine();
PrintArray(matrix);
*/

// красим фигуру
/*
int[,] pic = new int[,]
{
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 {0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 {0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 {0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0 },
 {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
 {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
 {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0 },
 {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
 {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
 {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0 },
 {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 },
 {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 },
 {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0 },
 {0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0 },
 {0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 },
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0 },
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
};

void PrintImage(int[,] image)
{
        //обращение к первому значению массив[3]
    for (int i = 0; i < image.GetLength(0); i++)

    {                              //обращение к первому значению массив[3]
        for (int j = 0; j < image.GetLength(1); j++)
        {
            //Console.Write($"{matr[i, j]} ");
            if (image[i,j]==0) 
            {
                Console.Write($" ");
            }
            else
            {
                Console.Write($"+");
            }
        }
        Console.WriteLine();   // для создания разграничивания
    }
}

void FillImage(int row, int col)
{
    if (pic[row, col]==0)
    {
        pic[row, col]=1;
        FillImage(row-1, col); // пример рекурсии(обращение метода к методу)
        FillImage(row, col-1); // пример рекурсии(обращение метода к методу)
        FillImage(row+1, col); // пример рекурсии(обращение метода к методу)
        FillImage(row, col+1); // пример рекурсии(обращение метода к методу)
    }
}

PrintImage(pic);
FillImage(13,13);
PrintImage(pic);
*/

// рассматриваем примеры факториала и рекурсии
//пример 1 с использованием int (позволяет в данном контексте выполнить 17 чисел)
/*
int Factorial(int n)
{
    //1!=1
    //0!=1
    if (n == 1) return 1;
    else return n*Factorial(n-1); // умножаем на преидущее число

}
for (int i = 1; i < 40; i++)
{
    Console.WriteLine($"{i}! = {Factorial(i)}"); // 1*2*3 = 3! = 6 факториал

}
*/

//пример 2 с использованием double (вмещает в себя значительно большие числа)
/*
double Factorial(int n)
{
    //1!=1
    //0!=1
    if (n == 1) return 1;
    else return n*Factorial(n-1); // умножаем на преидущее число

}
for (int i = 1; i < 40; i++)
{
    Console.WriteLine($"{i}! = {Factorial(i)}"); // 1*2*3 = 3! = 6 факториал

}
*/

//Еще один пример использования рекурсии это числа Фибоначчи(каждое след число задается через предыдущее
// f(1)=1
// f(2)=1
// f(n)=f(n-1)+f(n-2)
/*
int Fibonacci(int n)
{
    if(n==1||n==2) return 1;
    else return Fibonacci(n-1)+Fibonacci(n-2); //имеет высокую сложность, так как требует большого количества вычислений, возможно упростить
}

for (int i = 1; i < 10; i++)
{
    Console.WriteLine(Fibonacci(i));
}
*/

